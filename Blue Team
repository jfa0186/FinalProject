# Blue Team: Summary of Operations
 
## Table of Contents
- Network Topology
- Description of Targets
- Monitoring the Targets
- Patterns of Traffic & Behavior
- Suggestions for Going Further
 
### Network Topology
 
The following machines were identified on the network:
- Kali
 - **Operating System**: Kali GNU/Linux Rolling
 - **Purpose**: Penetration Testing
 - **IP Address**: 192.168.1.90
- Target 1 
 - **Operating System**: Debian GNU/Linux 8 (jessie)
 - **Purpose**: The WordPress Host (victim)
 - **IP Address**:192.168.1.110
- ELK
 - **Operating System**: Ubuntu 18.04.4 LTS
 - **Purpose**: Kibana (ELK stack)
 - **IP Address**: 192.168.1.100
- Capstone
 - **Operating System**: Ubuntu 18.04.1 LTS
 - **Purpose**: The Vulnerable Web Server
 - **IP Address**:192.168.1.105
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Network Diagram:

 
 
### Description of Targets
 
The target of this attack was: `Target 1` (192.168.1.110) and `Target 2` (192.168.1.115). However, only Target 1 was attacked. 
 
Target 1 is an Apache web server and has SSH enabled, so ports 80 and 22 are possible ports of entry for attackers. As such, the following alerts have been implemented:
 
### Monitoring the Targets
 
Traffic to these services should be carefully monitored. To this end, we have implemented the alerts below:
 
 
 
 
 
 
#### Excessive HTTP Errors
 
Excessive HTTP Errors is implemented as follows:
WHEN count() GROUPED OVER top 5 'http.response.status_code' IS ABOVE 400 FOR THE LAST 5 minutes
 - **Metric**: WHEN count() GROUPED OVER top 5 'http.response.status_code' 
 - **Threshold**: IS ABOVE 400 FOR THE LAST 5 minutes
 - **Vulnerability Mitigated**: Enumerated/Brute Froce
 - **Reliability**: The Alert is highly reliable. Measuring by error codes 400 and above will filter out any normal or successful responses. 400+ codes are client and server errors which are of more concern. Especially when taking into account these error codes going off at a high rate.

 ![http errors](https://user-images.githubusercontent.com/81786950/121724074-f778b200-caac-11eb-9681-4ed538eafec9.png)
 
 
 
 
 
 
#### HTTP Request Monitor Size
HTTP Monitor size is implemented as follows:
 WHEN sum() of http.request.bytes OVER all documents IS ABOVE 3500 FOR THE LAST 1 minute
 - **Metric**: WHEN sum() of http.request.bytes OVER all documents 
 - **Threshold**: IS ABOVE 3500 FOR THE LAST 1 minute
 - **Vulnerability Mitigated**: Code injection in HTTP requests (XSS and CRLF) or DDOS
 - **Reliability**: Alert could create false positives. This alert would be of medium reliability. There is a possibility for a large legitimate HTTP traffic.
 

 
#### CPU Usage Monitor
Cpu usage Monitor is implemented as follows:
WHEN max() OF system.process.cpu.total.pct OVER all documents IS ABOVE 0.5 FOR THE LAST 5 minutes
 - **Metric**: WHEN max() OF system.process.cpu.total.pct OVER all documents
 - **Threshold**: IS ABOVE 0.5 FOR THE LAST 5 minutes
 - **Vulnerability Mitigated**: Malicious software, programs such as malware or viruses running taking up resources. 
 - **Reliability**: The alert is highly reliable. Even if there isnâ€™t a malicious program running this can still help determine how to optimize CPU usage. 
 

 

 


